// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2021 12:09:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab6_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] d_in;
// wires                                               
wire [3:0] to_bin;
wire [3:0] to_gray;

// assign statements (if any)                          
lab6_1 i1 (
// port map - connection between master ports and signals/registers   
	.d_in(d_in),
	.to_bin(to_bin),
	.to_gray(to_gray)
);
initial 
begin 
#1000000 $finish;
end 
// d_in[ 3 ]
initial
begin
	d_in[3] = 1'b0;
	d_in[3] = #480000 1'b1;
	d_in[3] = #480000 1'b0;
end 
// d_in[ 2 ]
initial
begin
	repeat(2)
	begin
		d_in[2] = 1'b0;
		d_in[2] = #240000 1'b1;
		# 240000;
	end
	d_in[2] = 1'b0;
end 
// d_in[ 1 ]
initial
begin
	repeat(4)
	begin
		d_in[1] = 1'b0;
		d_in[1] = #120000 1'b1;
		# 120000;
	end
	d_in[1] = 1'b0;
end 
// d_in[ 0 ]
initial
begin
	repeat(8)
	begin
		d_in[0] = 1'b0;
		d_in[0] = #60000 1'b1;
		# 60000;
	end
	d_in[0] = 1'b0;
end 
endmodule

