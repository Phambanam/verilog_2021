// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2021 11:26:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab4_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key;
reg [7:0] sw70;
// wires                                               
wire [7:0] led70;

// assign statements (if any)                          
lab4_2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.key(key),
	.led70(led70),
	.sw70(sw70)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// key
initial
begin
	key = 1'b1;
	key = #70000 1'b0;
	key = #50000 1'b1;
	key = #280000 1'b0;
	key = #100000 1'b1;
end 
// sw70[ 7 ]
initial
begin
	sw70[7] = 1'b1;
	sw70[7] = #980000 1'b0;
end 
// sw70[ 6 ]
initial
begin
	sw70[6] = 1'b0;
end 
// sw70[ 5 ]
initial
begin
	sw70[5] = 1'b1;
	sw70[5] = #980000 1'b0;
end 
// sw70[ 4 ]
initial
begin
	sw70[4] = 1'b1;
	sw70[4] = #980000 1'b0;
end 
// sw70[ 3 ]
initial
begin
	sw70[3] = 1'b0;
	sw70[3] = #980000 1'b1;
end 
// sw70[ 2 ]
initial
begin
	sw70[2] = 1'b1;
end 
// sw70[ 1 ]
initial
begin
	sw70[1] = 1'b1;
end 
// sw70[ 0 ]
initial
begin
	sw70[0] = 1'b0;
end 
endmodule

