// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2021 10:46:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab5_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ina;
reg [3:0] inb;
reg pba;
// wires                                               
wire [3:0] led;

// assign statements (if any)                          
lab5_3 i1 (
// port map - connection between master ports and signals/registers   
	.ina(ina),
	.inb(inb),
	.led(led),
	.pba(pba)
);
initial 
begin 
#280000 $finish;
end 

// pba
initial
begin
	pba = 1'b1;
	pba = #80000 1'b0;
	pba = #120000 1'b1;
end 
// ina[ 3 ]
initial
begin
	ina[3] = 1'b0;
	ina[3] = #80000 1'b1;
	ina[3] = #120000 1'b0;
	ina[3] = #40000 1'b1;
end 
// ina[ 2 ]
initial
begin
	ina[2] = 1'b1;
	ina[2] = #80000 1'b0;
	ina[2] = #40000 1'b1;
	ina[2] = #40000 1'b0;
	ina[2] = #40000 1'b1;
end 
// ina[ 1 ]
initial
begin
	ina[1] = 1'b0;
	ina[1] = #40000 1'b1;
	ina[1] = #80000 1'b0;
	ina[1] = #120000 1'b1;
end 
// ina[ 0 ]
initial
begin
	ina[0] = 1'b1;
	ina[0] = #40000 1'b0;
	ina[0] = #200000 1'b1;
end 
// inb[ 3 ]
initial
begin
	inb[3] = 1'b0;
	inb[3] = #40000 1'b1;
	inb[3] = #40000 1'b0;
	inb[3] = #40000 1'b1;
	inb[3] = #120000 1'b0;
end 
// inb[ 2 ]
initial
begin
	inb[2] = 1'b1;
	inb[2] = #40000 1'b0;
	inb[2] = #40000 1'b1;
	inb[2] = #160000 1'b0;
end 
// inb[ 1 ]
initial
begin
	inb[1] = 1'b1;
	inb[1] = #40000 1'b0;
	inb[1] = #80000 1'b1;
	inb[1] = #40000 1'b0;
	inb[1] = #80000 1'b1;
end 
// inb[ 0 ]
initial
begin
	inb[0] = 1'b0;
	inb[0] = #40000 1'b1;
	inb[0] = #40000 1'b0;
	inb[0] = #40000 1'b1;
	inb[0] = #80000 1'b0;
	inb[0] = #40000 1'b1;
end 
endmodule

